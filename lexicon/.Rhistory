a
b = scale(a)
b
b = as.vector(scale(a))
b
mean(a)
mean(b)
mean(a), sd(a)
mean(a); sd(a)
mean(b); sd(b)
mean(b); var(b)
mean(a); var(a)
mean(a); sqrt(var(a))/99
mean(a); sqrt(var(a))
s <- list(
a = c(2, 32, 949),
b = c(3, 19, 564),
c = c(4, 34, 534)
)
lapply(a, length)
lapply(s, length)
unlist(lapply(s, length))
as.vector(unlist(lapply(s, length)))
lengths(s)
sapply(s)
sapply(s, length)
lapply(s, length)
as.vector(unlist(sapply(s, length)))
as.vector(sapply(s, length))
a = rnorm(100, 44, 8)
a = data.frame(rnorm(100, 44, 8), 1:100)
a
a[3] = row.names(a)
a
names(a)[3]
rownames
?rownames
?row.names
?rownames
?row.names
?rownames
a[3] = rownames(a)
a
###CHECK WHETHER LAST VARIABLE FROM SHOWSTIMULUS IN SOURCE IS LONGER THAN
#MAXRUN!
library(plyr)
rm(list = ls())
#read data
runs = x = 360
#z = x*y
#setwd('/Users/bennettkleinberg/Documents/Research/app/wp_onACIT/onacit/outputfiles/motivation_followup/full_16Mar')
setwd('/Users/bennettkleinberg/Documents/Research/app/wp_onACIT/onacit/outputfiles/motivation_followup/full_16Mar')
X = read.csv("reliabF1.csv", header=F, sep=";",
col.names = c("id", "date", "unid", "ip", "os",
"browser", "gender", "age", "lang", "edu", "country",
"cond", "rescod", "res", "rt", "stim", "type",
"cat", "resp", "isi", "trial", "corr",
"i", "j", "k", "k2", "t1",
"t2", "expkey1", "expkey2", "cohd"))
nrow(X)
rm(list = ls())
rm(list = ls())
setwd("/Users/bennettkleinberg/Documents/Research/app/wp_onACIT/onacit/outputfiles/reliabilityreward")
rawdata = read.table("reliabRAT_full_22082014.txt", header=T)
testip = as.data.frame(table(rawdata$ip)/x)
runs = x = 360
testip = as.data.frame(table(rawdata$ip)/x)
testip
rawdata
rawdata = read.table("reliab_full_22082014.txt", header=T)
testip = as.data.frame(table(rawdata$ip)/x)
testip
testip2 = as.vector(testip[testip[,2] > 1, ][,1])
rawdata = rawdata[!(rawdata$ip %in% testip2),]
nrow(rawdata)/360 #289 remaining
rawdata = droplevels(rawdata)
D = rawdata[(rawdata$rt >= 150) & (rawdata$rt <= 800) & (rawdata$corr == 1),]
Dinclerrors = rawdata[(rawdata$corr < 9999),]
validcases = tapply(D$trial, D$unid, length)
rtsallgen = round(tapply(D$rt, list(D$unid, D$type), mean),3)
sdsallgen = round(tapply(D$rt, list(D$unid, D$type), sd), 3)
rtsbirthday = round(tapply(D$rt, list(D$unid, D$type, D$cat == "birthday"), mean),3)
sdsbirthday = round(tapply(D$rt, list(D$unid, D$type, D$cat == "birthday"), sd),3)
rtsorigin = round(tapply(D$rt, list(D$unid, D$type, D$cat == "origin"), mean),3)
sdsorigin = round(tapply(D$rt, list(D$unid, D$type, D$cat == "origin"), sd),3)
rtsageyears = round(tapply(D$rt, list(D$unid, D$type, D$cat == "ageyears"), mean),3)
sdsageyears = round(tapply(D$rt, list(D$unid, D$type, D$cat == "ageyears"), sd),3)
errorsallgen = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type), mean), 3)
errorsallsdgen = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type), sd), 3)
errorsall = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type), mean), 3)
errorsallsd = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type), sd), 3)
errorsanimal = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type, Dinclerrors$cat == "animal"), mean), 3)
errorsanimalsd = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type, Dinclerrors$cat == "animal"), sd), 3)
errorscolor = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type, Dinclerrors$cat == "color"), mean), 3)
errorscolorsd = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type, Dinclerrors$cat == "color"), sd), 3)
errorsice = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type, Dinclerrors$cat == "ice"), mean), 3)
errorsicesd = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type, Dinclerrors$cat == "ice"), sd), 3)
diffgen = (rtsallgen[,2] - rtsallgen[,1]) / sdsallgen[,1]
#unid in D longer than in aggregated variables!
EF = data.frame(
"age" = tapply(D$age, D$unid, mean),
"gender" = tapply(D$gender, D$unid, mean),
"cond" = tapply(D$cond, D$unid, mean),
"unid" = as.data.frame(table(D$unid))$Var1,
"ip" = as.data.frame(table(D$ip))$Var1,
"valid" = tapply(D$trial, D$unid, length),
"RT_all_pro" = rtsallgen[,2],
"RT_all_irr" = rtsallgen[,1],
"RT_all_tar" = rtsallgen[,3],
"SD_all_irr" = sdsallgen[,1],
"ER_all_pro" = errorsallgen[,2],
"ER_all_irr" = errorsallgen[,1],
"ER_all_tar" = errorsallgen[,3],
"ERSD_all_irr" = errorsallsdgen[,1],
"PI" = rtsallgen[,2] - rtsallgen[,1],
"TI" = rtsallgen[,3] - rtsallgen[,1],
"TP" = rtsallgen[,3] - rtsallgen[,2],
"d_all" = round((rtsallgen[,2] - rtsallgen[,1]) / sdsallgen[,1], 2)
)
EF$ERPI = errorsallgen[,2] - errorsallgen[,1]
nrow(EF)
table(EF$ER_all_tar < .5)
EF = EF[EF$ER_all_tar < .5, ]
table(EF$ER_all_pro < .5)
EF = EF[EF$ER_all_pro < .5, ]
table(EF$ER_all_irr < .5)
EF = EF[EF$ER_all_irr < .5, ]
table(EF$valid > (x/2))
EF = EF[EF$valid > (x/2), ]
library("pROC")
head(EF)
auc(EF$cond,  EF$d_all, levels=c(1,0))
auc(EF$cond,  EF$d_all, levels=c(1,2))
auc(EF$cond,  EF$d_all, levels=c(0,2))
levels(EF$cond)
table(EF$cond)
inn_non = auc(EF$cond,  EF$d_all, levels=c(1,0)); inn_non
inn_non = auc(EF$cond,  EF$d_all, levels=c(1,0)); inn_non; ci(inn_non)
inn_mot = auc(EF$cond,  EF$d_all, levels=c(1,2)); inn_mot; ci(inn_mot)
table(EF$d_all > .2, EF$cond)
table(EF$d_all < .2, EF$cond)
prop.table(table(EF$d_all < .2, EF$cond), 2)
inn_non = auc(EF$cond,  EF$d_all, levels=c(1,0)); inn_non; ci(inn_non)
inn_mot = auc(EF$cond,  EF$d_all, levels=c(1,2)); inn_mot; ci(inn_mot)
roc.test(inn_non, inn_mot)
roc.test(inn_non, inn_mot, method = "d")
roc.test(inn_non, inn_mot, method = "b")
rm(list = ls())
setwd("/Users/bennettkleinberg/Documents/Research/app/wp_onACIT/onacit/outputfiles/motivation_followup")
rawdata = read.table("fulltest_motivation_reliability_16Mar.txt", header=T)
testip = as.data.frame(table(rawdata$ip)/x)
runs = x = 360
testip = as.data.frame(table(rawdata$ip)/x)
testip
testip2 = as.vector(testip[testip[,2] > 1, ][,1])
rawdata = rawdata[!(rawdata$ip %in% testip2),]
rawdata = droplevels(rawdata)
D = rawdata[(rawdata$rt >= 150) & (rawdata$rt <= 800) & (rawdata$corr == 1),]
Dinclerrors = rawdata[(rawdata$corr < 9999),]
#put into dataframe 150-800
validcases = tapply(D$trial, D$unid, length)
rtsallgen = round(tapply(D$rt, list(D$unid, D$type), mean),3)
sdsallgen = round(tapply(D$rt, list(D$unid, D$type), sd), 3)
rtsanimal = round(tapply(D$rt, list(D$unid, D$type, D$cat == "animal"), mean),3)
sdsanimal = round(tapply(D$rt, list(D$unid, D$type, D$cat == "animal"), sd),3)
rtscolor = round(tapply(D$rt, list(D$unid, D$type, D$cat == "color"), mean),3)
sdscolor = round(tapply(D$rt, list(D$unid, D$type, D$cat == "color"), sd),3)
rtsice = round(tapply(D$rt, list(D$unid, D$type, D$cat == "ice"), mean),3)
sdsice = round(tapply(D$rt, list(D$unid, D$type, D$cat == "ice"), sd),3)
errorsallgen = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type), mean), 3)
errorsallsdgen = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type), sd), 3)
errorsall = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type), mean), 3)
errorsallsd = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type), sd), 3)
errorsanimal = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type, Dinclerrors$cat == "animal"), mean), 3)
errorsanimalsd = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type, Dinclerrors$cat == "animal"), sd), 3)
errorscolor = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type, Dinclerrors$cat == "color"), mean), 3)
errorscolorsd = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type, Dinclerrors$cat == "color"), sd), 3)
errorsice = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type, Dinclerrors$cat == "ice"), mean), 3)
errorsicesd = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type, Dinclerrors$cat == "ice"), sd), 3)
diffgen = (rtsallgen[,2] - rtsallgen[,1]) / sdsallgen[,1]
#unid in D longer than in aggregated variables!
EF = data.frame(
"age" = tapply(D$age, D$unid, mean),
"gender" = tapply(D$gender, D$unid, mean),
"cond" = tapply(D$cond, D$unid, mean),
"unid" = as.data.frame(table(D$unid))$Var1,
"valid" = tapply(D$trial, D$unid, length),
"RT_all_pro" = rtsallgen[,2],
"RT_all_irr" = rtsallgen[,1],
"RT_all_tar" = rtsallgen[,3],
"SD_all_irr" = sdsallgen[,1],
"ER_all_pro" = errorsallgen[,2],
"ER_all_irr" = errorsallgen[,1],
"ER_all_tar" = errorsallgen[,3],
"ERSD_all_irr" = errorsallsdgen[,1],
"P-I" = rtsallgen[,2] - rtsallgen[,1],
"T-I" = rtsallgen[,3] - rtsallgen[,1],
"T-P" = rtsallgen[,3] - rtsallgen[,2],
"dCIT" = round((rtsallgen[,2] - rtsallgen[,1]) / sdsallgen[,1], 2)
)
nrow(EF)
EF$ERPI = errorsallgen[,2] - errorsallgen[,1]
table(EF$ER_all_tar < .5)
EF = EF[EF$ER_all_tar < .5, ]
table(EF$ER_all_pro < .5)
EF = EF[EF$ER_all_pro < .5, ]
table(EF$ER_all_irr < .5)
EF = EF[EF$ER_all_irr < .5, ]
table(EF$valid > (x/2))
EF = EF[EF$valid > (x/2), ]
library("pROC")
head(EF)
prop.table(table(EF$d_all < .2, EF$cond), 2)
prop.table(table(EF$dCIT < .2, EF$cond), 2)
inn_non = auc(EF$cond,  EF$dCIT, levels=c(0,1)); inn_non; ci(inn_non)
inn_low = auc(EF$cond,  EF$dCIT, levels=c(0,2)); inn_low; ci(inn_low)
inn_hig = auc(EF$cond,  EF$dCIT, levels=c(0,3)); inn_hig; ci(inn_hig)
inn_non = auc(EF$cond,  EF$dCIT, levels=c(0,1)); inn_non; ci(inn_non)
inn_low = auc(EF$cond,  EF$dCIT, levels=c(0,2)); inn_low; ci(inn_low)
inn_hig = auc(EF$cond,  EF$dCIT, levels=c(0,3)); inn_hig; ci(inn_hig)
roc.test(inn_non, inn_hig, method = "d")
roc.test(inn_non, inn_hig, method = "v")
roc.test(inn_non, inn_hig, method = "d")
roc.test(inn_non, inn_low, method = "d")
roc.test(inn_low, inn_hig, method = "d")
roc.test(inn_low, inn_hig, method = "d")
roc.test(inn_non, inn_low, method = "d")
roc.test(inn_non, inn_hig, method = "d")
rm(list = ls())
setwd('/Users/bennettkleinberg/Documents/Research/app/wp_onACIT/onacit/outputfiles/motivation_followup/full_16Mar')
EFn = read.table("fulltest_16Mar_endfile_7May2015.txt", header=T)
setwd('/Users/bennettkleinberg/Documents/Research/app/wp_onACIT/onacit/outputfiles/motivation_followup')
EFn = read.table("fulltest_16Mar_endfile_7May2015.txt", header=T)
head(EFn)
names(EFn)
data$cattest = apply(data[, c(24, 27, 30)], 1, mean)
EFn$cattest = apply(EFn[, c(24, 27, 30)], 1, mean)
head(EFn)
summary(aov(EFn$cattest ~ EF$cond))
summary(aov(EFn$cattest ~ EFn$cond))
summary(aov(EFn$cattest ~ as.factor(EFn$cond)))
tapply(EFn$cattest, EFn$cond, mean)
tapply(EFn$cattest, EFn$cond, sd)
table(EFn$ER_all_tar < .5)
table(EFn$ER_all_tar < .5)
EFn = EFn[EFn$ER_all_tar < .5, ]
table(EFn$ER_all_pro < .5)
EFn = EFn[EFn$ER_all_pro < .5, ]
table(EFn$ER_all_irr < .5)
EFn = EFn[EFn$ER_all_irr < .5, ]
table(EFn$valid > (x/2))
EFn = EFn[EFn$valid > (x/2), ]
x = 360
table(EFn$ER_all_tar < .5)
EFn = EFn[EFn$ER_all_tar < .5, ]
table(EFn$ER_all_pro < .5)
EFn = EFn[EFn$ER_all_pro < .5, ]
table(EFn$ER_all_irr < .5)
EFn = EFn[EFn$ER_all_irr < .5, ]
table(EFn$valid > (x/2))
EFn = EFn[EFn$valid > (x/2), ]
summary(aov(EFn$cattest ~ as.factor(EFn$cond)))
tapply(EFn$cattest, EFn$cond, mean)
tapply(EFn$cattest, EFn$cond, sd)
hammer = 565
knife = 505
gun = 495
stick = 498
bat = 503
all = c(knife, hammer, gun, stick, bat)
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 590),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,600,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 590),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,610,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 590),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,650,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
hammer = 575
knife = 505
gun = 495
stick = 498
bat = 503
all = c(knife, hammer, gun, stick, bat)
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 590),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,650,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
axis(side=2, at=seq(450,550,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
hammer = 555
knife = 480
gun = 482
stick = 475
bat = 488
all = c(knife, hammer, gun, stick, bat)
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 590),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,550,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 590),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,550,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
hammer = 565
knife = 480
gun = 482
stick = 475
bat = 488
all = c(knife, hammer, gun, stick, bat)
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 590),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,550,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
axis(side=2, at=seq(450,600,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 600),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,600,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 600),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,600,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="RTs")
par(mfrow=c(1,2))
png(filename = "bar_graph_NWO_05102015.png",
width = 32, height = 20, units = "cm", pointsize = 20,
bg = "white",  res = 300)
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 600),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,600,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="RTs")
dev.off()
setwd("/Users/bennettkleinberg/Documents/Research/PhD Amsterdam/nwo_aanvraag")
hammer = 565
knife = 480
gun = 482
stick = 475
bat = 488
all = c(knife, hammer, gun, stick, bat)
par(mfrow=c(1,2))
png(filename = "bar_graph_NWO_05102015.png",
width = 32, height = 20, units = "cm", pointsize = 20,
bg = "white",  res = 300)
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 600),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,600,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="RTs")
dev.off()
citations = 4924
followers = 770
Fc = 43.3*(citations^0.32)
Fa = followers
Kindex = Fa/Fc
Kindex
citations = 75 #based on google scholar
followers = 1273 #twitter
Fc = 43.3*(citations^0.32)
Fa = followers
Kindex = Fa/Fc
Kindex
citations = 8379 #based on google scholar
followers = 2240 #twitter
Fc = 43.3*(citations^0.32)
Fa = followers
Kindex = Fa/Fc
Kindex
library(data.table)
setwd('/Users/bennettkleinberg/GitHub/anonymiseme/lexicon')
?fread
data = fread('worldcitiespop.txt', header=T)
names(data)
head(data)
cities = data$City
head(cities)
class(cities)
mode(cities)
write.table(cities,
file='cities_only.txt')
write.table(cities,
file='cities_only.txt',
row.names=F,
append=F)
